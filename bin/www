var app = require('../app');
var debug = require('debug')('chat-node:server');
var http = require('http');

app.set("port", process.env.PORT || 3006);

const server = app.listen(app.get("port"), '0.0.0.0', () => {
  console.log("server on port " + app.get("port"));
});



const SocketIO = require('socket.io');
const io = SocketIO(server);


const connectedSockets = new Map();
const userChatMap = new Map(); // Mapa que asigna usuarios a sus chats


io.on('connection', (socket) => {
  console.log('Un usuario se ha conectado');

  socket.on('setUserId', (userId) => {
    console.log("----------- www " + userId)
    connectedSockets.set(userId, socket);
  });

  socket.on('joinChat', (userId, chatId) => {
    // Registra que el usuario se ha unido a un chat específico
    if (!userChatMap.has(userId)) {
      userChatMap.set(userId, new Set());
    }
    userChatMap.get(userId).add(chatId);
  });

  socket.on('message', (data) => {
    const receiverSocket = connectedSockets.get(data.receiverId);

    if (receiverSocket) {
      // Verifica si el receptor está en el chat correcto
      const receiverChats = userChatMap.get(data.receiverId);
      if (receiverChats && receiverChats.has(data.chatId)) {
        receiverSocket.emit('message', {
          senderName: data.senderName,
          messageText: data.messageText,
          messageTime: new Date(),
        });
      }
    }
  });

  socket.on('disconnect', () => {
    console.log('Un usuario se ha desconectado');

    // Elimina el socket desconectado de la lista de sockets conectados
    for (const [userId, connectedSocket] of connectedSockets.entries()) {
      if (connectedSocket === socket) {
        connectedSockets.delete(userId);
        // Elimina al usuario de todos sus chats al desconectarse
        const userChats = userChatMap.get(userId);
        if (userChats) {
          for (const chatId of userChats) {
            // Realiza la lógica para eliminar al usuario del chat (puede ser un broadcast a los demás miembros)
          }
        }

        userChatMap.delete(userId);
        break;
      }
    }
  });
});












/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

