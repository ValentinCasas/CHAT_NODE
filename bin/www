var app = require('../app');
var debug = require('debug')('chat-node:server');
var http = require('http');

app.set("port", process.env.PORT || 3006);

const server = app.listen(app.get("port"), '0.0.0.0', () => {
  console.log("server on port " + app.get("port"));
});



const SocketIO = require('socket.io');
const io = SocketIO(server);


var userChatList = [];
var userSocketMap = new Map();

function isBidirectionalConnection(userChatList, senderId, receiverId) {
  const connection1 = { userId: senderId, chatId: receiverId };
  const connection2 = { userId: receiverId, chatId: senderId };

  return (
    userChatList.some((connection) =>
      connection.userId === connection1.userId &&
      connection.chatId === connection1.chatId
    ) &&
    userChatList.some((connection) =>
      connection.userId === connection2.userId &&
      connection.chatId === connection2.chatId
    )
  );
}


io.on('connection', (socket) => {



  socket.on('joinChat', (userId, chatId) => {

    const existingConnection = userChatList.find((connection) => {
      return connection.userId === userId && connection.chatId === chatId;
    });

    userSocketMap.set(userId, socket);

    if (!existingConnection) {
      userChatList.push({ userId, chatId });
    }

  });



  socket.on('message', (data) => {
    const senderId = data.senderId;
    const receiverId = data.receiverId;
    const messageText = data.messageText;

    const receiverSocket = userSocketMap.get(receiverId);

    let isSenderInReceiverChat = isBidirectionalConnection(userChatList, senderId, receiverId);

    const userChatListText = userChatList.map((connection) => `${connection.userId},${connection.chatId}`).join('; ');


    if (!isSenderInReceiverChat && receiverSocket) {
      // Envía el mensaje al receptor solo si el remitente está en su chat
      receiverSocket.emit('messageReceiver', {
        senderName: data.senderName,
        messageText: userChatListText,
        messageTime: new Date(),
      });
    }
  });


  /* socket.on('disconnect', () => {
    console.log('Un usuario se ha desconectado');

    const disconnectedUserId = userId;

    userChatList = userChatList.filter((connection) => {
      return connection.userId !== disconnectedUserId;
    });

  }); */


});












/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

